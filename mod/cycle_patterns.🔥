from .models import Sudoku4x4

fn check_cyclic(grid: Sudoku4x4, order_row: Bool) -> Bool:
  var row_mul: Int
  var col_mul: Int
  row_mul, col_mul = (0, 1) if order_row else (1, 0)

  for index in range(4):
    var first_row: Int
    var first_col: Int
    first_row, first_col = row_mul * index, col_mul * index
    var second_row, second_col = first_row, first_col
    if order_row:
      second_row += 2
    else:
      second_col += 2

    var conjugate_first_row = (row_mul * index + (1 if order_row  else 2)) % 4
    var conjugate_first_col = (col_mul * index + (2 if order_row else 1)) % 4
    
    var conjugate_second_row, conjugate_second_col = conjugate_first_row, conjugate_first_col
    if order_row:
      conjugate_second_row += 2
    else:
      conjugate_second_col += 2

    if  grid.get(first_row,first_col) \
        != grid.get(conjugate_first_row,conjugate_first_col) \
        \
        or grid.get(second_row, second_col) != \
        grid.get(conjugate_second_row, conjugate_second_col):
      return False

  return True

fn check_standing(grid: Sudoku4x4, order_row: Bool) -> Bool:
  var row_mul: Int
  var col_mul: Int
  row_mul, col_mul = (0, 1) if order_row else (1, 0)

  for index in range(4):
    var first_row: Int
    var first_col: Int
    first_row, first_col = row_mul * index, col_mul * index
    var second_row, second_col = first_row, first_col
    if order_row:
      second_row += 2
    else:
      second_col += 2

    var conjugate_first_row = (row_mul * index + 1) if order_row else (3 - row_mul*index)
    var conjugate_first_col = (3 - col_mul*index) if order_row else (col_mul * index + 1)
    
    var conjugate_second_row, conjugate_second_col = conjugate_first_row, conjugate_first_col
    if order_row:
      conjugate_second_row += 2
    else:
      conjugate_second_col += 2

    if  grid.get(first_row,first_col) \
        != grid.get(conjugate_first_row,conjugate_first_col) \
        \
        or grid.get(second_row, second_col) != \
        grid.get(conjugate_second_row, conjugate_second_col):
      return False

  return True

