from .models import Sudoku4x4

fn check_symmetry(grid: Sudoku4x4,
                  basis: (Int, Int),
                  conjugate: fn(Int, Int, Int) -> (Int, Int),
                  pairs: Int = 2) -> Bool:

  for index in range(4):
    for pair in range(pairs):
      # Primary position along basis vector
      row = basis[0] * index + pair * (2 if basis[0] == 0 else 0)
      col = basis[1] * index + pair * (2 if basis[0] == 0 else 0)

      # Conjugate position from modulation
      conj_row, conj_col = conjugate(row, col, index)

      if grid.get(row, col) != grid.get(conj_row, conj_col):
        return False

  return True

struct Modulations:
  @staticmethod
  fn cyclic(r: Int, c: Int, i: Int) -> (Int, Int):
    return ( 
            (r + 1) % 4 if r == i else (r + 2) % 4, 
            (c + 2) % 4 if c == i else (c + 1) % 4
    )

  @staticmethod
  fn standing(r: Int, c: Int, i: Int) -> (Int, Int):
    return ( 
            (3 - r if r == i else r + 1),
            (3 - c if c == i else c + 1)
    )
